(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{239:function(e,t,a){"use strict";a.r(t);var s=a(3),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"install"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#install"}},[e._v("#")]),e._v(" Install")]),e._v(" "),a("h2",{attrs:{id:"requirements"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#requirements"}},[e._v("#")]),e._v(" Requirements")]),e._v(" "),a("p",[e._v("Thor requires "),a("code",[e._v("Go")]),e._v(" 1.12+ and "),a("code",[e._v("C")]),e._v(" compiler to build. To install "),a("code",[e._v("Go")]),e._v(", follow this "),a("a",{attrs:{href:"https://golang.org/doc/install",target:"_blank",rel:"noopener noreferrer"}},[e._v("link"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"getting-the-source"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getting-the-source"}},[e._v("#")]),e._v(" Getting the source")]),e._v(" "),a("p",[e._v("Clone the Thor "),a("a",{attrs:{href:"https://github.com/vechain/thor",target:"_blank",rel:"noopener noreferrer"}},[e._v("repo"),a("OutboundLink")],1),e._v(":")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" clone https://github.com/vechain/thor.git\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" thor\n")])])]),a("h3",{attrs:{id:"dependency-management"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dependency-management"}},[e._v("#")]),e._v(" Dependency management")]),e._v(" "),a("p",[e._v("Simply run:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" dep\n")])])]),a("p",[e._v("If you keep getting network error, it is suggested to use "),a("a",{attrs:{href:"https://golang.org/cmd/go/#hdr-Module_proxy_protocol",target:"_blank",rel:"noopener noreferrer"}},[e._v("Go Module Proxy"),a("OutboundLink")],1),e._v(". "),a("a",{attrs:{href:"https://proxy.golang.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://proxy.golang.org/"),a("OutboundLink")],1),e._v(" is one option.")]),e._v(" "),a("h3",{attrs:{id:"building"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#building"}},[e._v("#")]),e._v(" Building")]),e._v(" "),a("p",[e._v("To build the main app "),a("code",[e._v("thor")]),e._v(", just run")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v("\n")])])]),a("p",[e._v("or build the full suite:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" all\n")])])]),a("p",[e._v("If no error reported, all built executable binaries will appear in folder "),a("em",[e._v("bin")]),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"running-thor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#running-thor"}},[e._v("#")]),e._v(" Running Thor")]),e._v(" "),a("p",[e._v("Connect to VeChain's mainnet:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("bin/thor --network main\n")])])]),a("p",[e._v("Connect to VeChain's testnet:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("bin/thor --network "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("test")]),e._v("\n")])])]),a("p",[e._v("or startup a custom network")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("bin/thor --network "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("custom-net-genesis.json"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])])]),a("p",[e._v("example genesis config file can be found at "),a("a",{attrs:{href:"https://raw.githubusercontent.com/vechain/thor/master/genesis/example.json",target:"_blank",rel:"noopener noreferrer"}},[e._v("genesis/example.json"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("p",[e._v("To find out usages of all command line options:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("bin/thor -h\n")])])]),a("ul",[a("li",[a("code",[e._v("--network value")]),e._v("             the network to join (main|test) or path to genesis file")]),e._v(" "),a("li",[a("code",[e._v("--data-dir value")]),e._v("            directory for block-chain databases")]),e._v(" "),a("li",[a("code",[e._v("--cache value")]),e._v("               megabytes of ram allocated to internal caching (default: 2048)")]),e._v(" "),a("li",[a("code",[e._v("--beneficiary value")]),e._v("         address for block rewards")]),e._v(" "),a("li",[a("code",[e._v("--target-gas-limit value")]),e._v("    target block gas limit (adaptive if set to 0) (default: 0)")]),e._v(" "),a("li",[a("code",[e._v("--api-addr value")]),e._v('            API service listening address (default: "localhost:8669")')]),e._v(" "),a("li",[a("code",[e._v("--api-cors value")]),e._v("            comma separated list of domains from which to accept cross origin requests to API")]),e._v(" "),a("li",[a("code",[e._v("--api-timeout value")]),e._v("         API request timeout value in milliseconds (default: 10000)")]),e._v(" "),a("li",[a("code",[e._v("--api-call-gas-limit value")]),e._v("  limit contract call gas (default: 50000000)")]),e._v(" "),a("li",[a("code",[e._v("--api-backtrace-limit value")]),e._v(" limit the distance between "),a("code",[e._v("position")]),e._v(" and best block for subscriptions APIs (default: 1000)")]),e._v(" "),a("li",[a("code",[e._v("--verbosity value")]),e._v("           log verbosity (0-9) (default: 3)")]),e._v(" "),a("li",[a("code",[e._v("--max-peers value")]),e._v("           maximum number of P2P network peers (P2P network disabled if set to 0) (default: 25)")]),e._v(" "),a("li",[a("code",[e._v("--p2p-port value")]),e._v("            P2P network listening port (default: 11235)")]),e._v(" "),a("li",[a("code",[e._v("--nat value")]),e._v('                 port mapping mechanism (any|none|upnp|pmp|extip:<IP>) (default: "none")')]),e._v(" "),a("li",[a("code",[e._v("--bootnode value")]),e._v("            comma separated list of bootnode IDs")]),e._v(" "),a("li",[a("code",[e._v("--skip-logs")]),e._v("                 skip writing event|transfer logs (/logs API will be disabled)")]),e._v(" "),a("li",[a("code",[e._v("--pprof")]),e._v("                     turn on go-pprof")]),e._v(" "),a("li",[a("code",[e._v("--help, -h")]),e._v("                  show help")]),e._v(" "),a("li",[a("code",[e._v("--version, -v")]),e._v("               print the version")])]),e._v(" "),a("h3",{attrs:{id:"sub-commands"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sub-commands"}},[e._v("#")]),e._v(" Sub-commands")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("solo")]),e._v("                client runs in solo mode for test & dev")])]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("bin/thor solo --on-demand               "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# create new block when there is pending transaction")]),e._v("\nbin/thor solo --persist                 "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# save blockchain data to disk(default to memory)")]),e._v("\nbin/thor solo --persist --on-demand     "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# two options can work together")]),e._v("\n")])])]),a("ul",[a("li",[a("code",[e._v("master-key")]),e._v("          master key management")])]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# print the master address")]),e._v("\nbin/thor master-key\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# export master key to keystore")]),e._v("\nbin/thor master-key --export "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" keystore.json\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# import master key from keystore")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" keystore.json "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" bin/thor master-key --import\n")])])]),a("h2",{attrs:{id:"docker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker"}},[e._v("#")]),e._v(" Docker")]),e._v(" "),a("p",[e._v("Docker is one quick way for running a vechain node:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("docker run -d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  -v "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("path-to-your-data-directory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("/.org.vechain.thor:/root/.org.vechain.thor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  -p "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:8669:8669 -p "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("11235")]),e._v(":11235 -p "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("11235")]),e._v(":11235/udp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  --name thor-node vechain/thor --network "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("test")]),e._v("\n")])])]),a("p",[e._v("Do not forget to add the "),a("code",[e._v("--api-addr 0.0.0.0:8669")]),e._v(" flag if you want other containers and/or hosts to have access to the RESTful API. "),a("code",[e._v("Thor")]),e._v("binds to "),a("code",[e._v("localhost")]),e._v(" by default and it will not accept requests outside the container itself without the flag.")]),e._v(" "),a("p",[e._v("The "),a("a",{attrs:{href:"https://raw.githubusercontent.com/vechain/thor/master/Dockerfile",target:"_blank",rel:"noopener noreferrer"}},[e._v("Dockerfile"),a("OutboundLink")],1),e._v(" is designed to build the last release of the source code and will publish docker images to "),a("a",{attrs:{href:"https://hub.docker.com/r/vechain/thor/",target:"_blank",rel:"noopener noreferrer"}},[e._v("dockerhub"),a("OutboundLink")],1),e._v(" by release, feel free to fork and build Dockerfile for your own purpose.")]),e._v(" "),a("h2",{attrs:{id:"public-nodes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#public-nodes"}},[e._v("#")]),e._v(" Public Nodes")]),e._v(" "),a("p",[e._v("public nodes are available for development and testing. The URLs are as follows:")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Mainnet:")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://vethor-node.vechain.com/doc/swagger-ui/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://vethor-node.vechain.com/doc/swagger-ui/"),a("OutboundLink")],1)])]),e._v(" "),a("li",[a("p",[e._v("Testnet:")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://vethor-node-test.vechaindev.com/doc/swagger-ui/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://vethor-node-test.vechaindev.com/doc/swagger-ui/"),a("OutboundLink")],1)])])]),e._v(" "),a("p",[e._v("You can just open it in the browser and a swagger page will appear, which will easily help you interact with VeChainThor blockchain. Please note that the public nodes are not designed for the production environment, and VeChain Foundation does not guarantee the reliability and availability.")])])}),[],!1,null,null,null);t.default=r.exports}}]);