(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{245:function(e,t,o){"use strict";o.r(t);var r=o(3),a=Object(r.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"type"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#type"}},[e._v("#")]),e._v(" Type")]),e._v(" "),o("h2",{attrs:{id:"thor-status"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#thor-status"}},[e._v("#")]),e._v(" Thor.Status")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("progress")]),e._v(" - "),o("code",[e._v("number")]),e._v(": A number [0-1] indicates the syncing progress of the currently connected node")]),e._v(" "),o("li",[o("code",[e._v("head")]),e._v(": Summarized block info that indicates the head block of the currently connected node\n"),o("ul",[o("li",[o("code",[e._v("id")]),e._v(" - "),o("code",[e._v("string")]),e._v(": Identifier of the block (bytes32)")]),e._v(" "),o("li",[o("code",[e._v("number")]),e._v(" - "),o("code",[e._v("number")]),e._v(": Number of the block")]),e._v(" "),o("li",[o("code",[e._v("timestamp")]),e._v(" - "),o("code",[e._v("number")]),e._v(": Unix timestamp of the block")]),e._v(" "),o("li",[o("code",[e._v("parentID")]),e._v(" - "),o("code",[e._v("string")]),e._v(": ID of the parent block (bytes32)")])])])]),e._v(" "),o("h2",{attrs:{id:"thor-block"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#thor-block"}},[e._v("#")]),e._v(" Thor.Block")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("id")]),e._v(" - "),o("code",[e._v("string")]),e._v(": Identifier of the block (bytes32)")]),e._v(" "),o("li",[o("code",[e._v("number")]),e._v(" - "),o("code",[e._v("number")]),e._v(": Number of block")]),e._v(" "),o("li",[o("code",[e._v("parentID")]),e._v(" - "),o("code",[e._v("string")]),e._v(": ID of parent block (bytes32)")]),e._v(" "),o("li",[o("code",[e._v("timestamp")]),e._v(" - "),o("code",[e._v("number")]),e._v(": Unix timestamp of block")]),e._v(" "),o("li",[o("code",[e._v("gasLimit")]),e._v(" - "),o("code",[e._v("number")]),e._v(": Gas limit of the block")]),e._v(" "),o("li",[o("code",[e._v("beneficiary")]),e._v(" - "),o("code",[e._v("string")]),e._v(": Address of account to receive block reward")]),e._v(" "),o("li",[o("code",[e._v("gasUsed")]),e._v(" - "),o("code",[e._v("number")]),e._v(": Actual gas used of block")]),e._v(" "),o("li",[o("code",[e._v("totalScore")]),e._v(" - "),o("code",[e._v("number")]),e._v(": Score of the main chain")]),e._v(" "),o("li",[o("code",[e._v("txRoot")]),e._v(" - "),o("code",[e._v("string")]),e._v(": Root hash of transaction in the block (bytes32)")]),e._v(" "),o("li",[o("code",[e._v("stateRoot")]),e._v(" - "),o("code",[e._v("string")]),e._v(": Root hash of state (bytes32)")]),e._v(" "),o("li",[o("code",[e._v("signer")]),e._v(" - "),o("code",[e._v("string")]),e._v(": Address of who signed the block (bytes20)")]),e._v(" "),o("li",[o("code",[e._v("transactions")]),e._v(" - "),o("code",[e._v("Array<string>")]),e._v(": Array of transaction IDs")]),e._v(" "),o("li",[o("code",[e._v("isTrunk")]),e._v(" - "),o("code",[e._v("bool")]),e._v(": Whether the block is in trunk")])]),e._v(" "),o("h2",{attrs:{id:"thor-account"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#thor-account"}},[e._v("#")]),e._v(" Thor.Account")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("balance")]),e._v(" - "),o("code",[e._v("string")]),e._v(": Account balance in hex string")]),e._v(" "),o("li",[o("code",[e._v("energy")]),e._v(" - "),o("code",[e._v("string")]),e._v(": Account energy in hex string")]),e._v(" "),o("li",[o("code",[e._v("hasCode")]),e._v(" - "),o("code",[e._v("bool")]),e._v(": Whether the account is a smart contract")])]),e._v(" "),o("h2",{attrs:{id:"thor-transaction"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#thor-transaction"}},[e._v("#")]),e._v(" Thor.Transaction")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("id")]),e._v(" - "),o("code",[e._v("string")]),e._v(": Identifier of the transaction")]),e._v(" "),o("li",[o("code",[e._v("chainTag")]),e._v(" - "),o("code",[e._v("number")]),e._v(": Last byte of genesis block ID")]),e._v(" "),o("li",[o("code",[e._v("blockRef")]),e._v(" - "),o("code",[e._v("string")]),e._v(': The BlockRef (an eight-byte array string) includes two parts: the first four bytes contains the block height (number) and the rest four bytes is part of the referred blockâ€™s ID. If the referred block is future block, blockNumber + "00000000" should be added')]),e._v(" "),o("li",[o("code",[e._v("expiration")]),e._v(" - "),o("code",[e._v("number")]),e._v(" : Expiration relative to blockRef (in unit block)")]),e._v(" "),o("li",[o("code",[e._v("clauses")]),e._v(" - "),o("a",{attrs:{href:"#thorclause"}},[o("code",[e._v("Array<Thor.Clause>")])])]),e._v(" "),o("li",[o("code",[e._v("gasPriceCoef")]),e._v(" - "),o("code",[e._v("number")]),e._v(": Coefficient used to calculate the final gas price")]),e._v(" "),o("li",[o("code",[e._v("gas")]),e._v("  - "),o("code",[e._v("number")]),e._v(": Maximum of gas can be consumed to execute this transaction\norigin")]),e._v(" "),o("li",[o("code",[e._v("nonce")]),e._v(" - "),o("code",[e._v("string")]),e._v(": Transaction nonce")]),e._v(" "),o("li",[o("code",[e._v("dependsOn")]),e._v(" - "),o("code",[e._v("string|null")]),e._v(": ID of the transaction which the current transaction depends (bytes32)")]),e._v(" "),o("li",[o("code",[e._v("size")]),e._v(" - "),o("code",[e._v("number")]),e._v(": Byte size of the transaction that is RLP encoded")]),e._v(" "),o("li",[o("code",[e._v("meta")]),e._v(" - "),o("a",{attrs:{href:"#thortransaction.meta"}},[o("code",[e._v("Thor.Transaction.Meta")])])])]),e._v(" "),o("h2",{attrs:{id:"thor-clause"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#thor-clause"}},[e._v("#")]),e._v(" Thor.Clause")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("to")]),e._v(" - "),o("code",[e._v("string|null")]),e._v(": The destination address of the message, null for a contract-creation transaction")]),e._v(" "),o("li",[o("code",[e._v("value")]),e._v("- "),o("code",[e._v("string|number")]),e._v(": The value, with a unit of "),o("code",[e._v("wei")]),e._v(", transferred through the transaction. Specifically, it plays the role of endowment when the transaction is contract-creation type")]),e._v(" "),o("li",[o("code",[e._v("data")]),e._v(" - "),o("code",[e._v("string")]),e._v(": Either the "),o("a",{attrs:{href:"http://solidity.readthedocs.io/en/latest/abi-spec.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("ABI byte string"),o("OutboundLink")],1),e._v(" containing the data of the function call on a contract or the initialization code of a contract-creation transaction")])]),e._v(" "),o("h2",{attrs:{id:"thor-transaction-meta"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#thor-transaction-meta"}},[e._v("#")]),e._v(" Thor.Transaction.Meta")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("blockID")]),e._v(" - "),o("code",[e._v("string")]),e._v(": Block identifier of transaction")]),e._v(" "),o("li",[o("code",[e._v("blockNumber")]),e._v(" - "),o("code",[e._v("number")]),e._v(": Block number of transaction")]),e._v(" "),o("li",[o("code",[e._v("blockTimestamp")]),e._v(" - "),o("code",[e._v("number")]),e._v(": Block unix timestamp of transaction")])]),e._v(" "),o("h2",{attrs:{id:"thor-receipt"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#thor-receipt"}},[e._v("#")]),e._v(" Thor.Receipt")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("gasUsed")]),e._v(" - "),o("code",[e._v("number")]),e._v(": Actual gas used of block")]),e._v(" "),o("li",[o("code",[e._v("gasPayer")]),e._v(" - "),o("code",[e._v("string")]),e._v(": Address of account who paid used gas")]),e._v(" "),o("li",[o("code",[e._v("paid")]),e._v(" - "),o("code",[e._v("string")]),e._v(": Hex form of amount of paid energy")]),e._v(" "),o("li",[o("code",[e._v("reward")]),e._v(" - "),o("code",[e._v("string")]),e._v(": Hex form of amount of reward")]),e._v(" "),o("li",[o("code",[e._v("reverted")]),e._v(" - "),o("code",[e._v("boolean")]),e._v(": true means the transaction was reverted")]),e._v(" "),o("li",[o("code",[e._v("outputs")]),e._v(" - "),o("a",{attrs:{href:"#thorreceiptoutput"}},[o("code",[e._v("Array<Thor.Receipt.Output>")])]),e._v(": Clause's corresponding outputs")]),e._v(" "),o("li",[o("code",[e._v("meta")]),e._v(" - "),o("a",{attrs:{href:"#thorlogmeta"}},[o("code",[e._v("Thor.Log.Meta")])])])]),e._v(" "),o("h2",{attrs:{id:"thor-receipt-output"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#thor-receipt-output"}},[e._v("#")]),e._v(" Thor.Receipt.Output")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("contractAddress")]),e._v(" - "),o("code",[e._v("string")]),e._v(": Deployed contract address, if the corresponding clause is a contract deployment clause")]),e._v(" "),o("li",[o("code",[e._v("events")]),e._v(" - "),o("a",{attrs:{href:"#thorlogevent"}},[o("code",[e._v("Array<Thor.Log.Event>")])]),e._v(": Event log objects produced during clause execution")]),e._v(" "),o("li",[o("code",[e._v("transfers")]),e._v(" - "),o("a",{attrs:{href:"#thorlogtransfer"}},[o("code",[e._v("Array<Thor.Log.Transfer>")])]),e._v(" Transfer log produced during clause execution")])]),e._v(" "),o("h2",{attrs:{id:"thor-log-event"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#thor-log-event"}},[e._v("#")]),e._v(" Thor.Log.Event")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("address")]),e._v(" - "),o("code",[e._v("string")]),e._v(": The address of contract which produces the event (bytes20)")]),e._v(" "),o("li",[o("code",[e._v("topics")]),e._v(" - "),o("code",[e._v("Array<string>")]),e._v(": an array with max 5 32 Byte topics, topic 1-4 contains indexed parameters of the log")]),e._v(" "),o("li",[o("code",[e._v("data")]),e._v(" - "),o("code",[e._v("string")]),e._v(": The data containing non-indexed log parameter")]),e._v(" "),o("li",[o("code",[e._v("meta")]),e._v("  - "),o("a",{attrs:{href:"#thorlog.meta"}},[o("code",[e._v("Thor.Log.Meta")])])]),e._v(" "),o("li",[o("code",[e._v("decoded")]),e._v("  - "),o("a",{attrs:{href:"#thordecoded"}},[o("code",[e._v("Thor.Decoded(optional)")])]),e._v(": Decoded event log based on the event ABI")])]),e._v(" "),o("h2",{attrs:{id:"thor-log-transfer"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#thor-log-transfer"}},[e._v("#")]),e._v(" Thor.Log.Transfer")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("sender")]),e._v(" - "),o("code",[e._v("string")]),e._v(": Address that sends vet.")]),e._v(" "),o("li",[o("code",[e._v("recipient")]),e._v(" - "),o("code",[e._v("string")]),e._v(": Address that receives vet.")]),e._v(" "),o("li",[o("code",[e._v("amount")]),e._v(" - "),o("code",[e._v("string")]),e._v(": Amount of vet in "),o("code",[e._v("wei")]),e._v(".")]),e._v(" "),o("li",[o("code",[e._v("meta")]),e._v("  - "),o("a",{attrs:{href:"#thorlogmeta"}},[o("code",[e._v("Thor.Log.Meta")])])])]),e._v(" "),o("h2",{attrs:{id:"thor-log-meta"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#thor-log-meta"}},[e._v("#")]),e._v(" Thor.Log.Meta")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("blockID")]),e._v(" - "),o("code",[e._v("string")]),e._v(": Block identifier of log")]),e._v(" "),o("li",[o("code",[e._v("blockNumber")]),e._v(" - "),o("code",[e._v("number")]),e._v(": Block number of log")]),e._v(" "),o("li",[o("code",[e._v("blockTimestamp")]),e._v(" - "),o("code",[e._v("number")]),e._v(": Block unix timestamp of log")]),e._v(" "),o("li",[o("code",[e._v("txID")]),e._v(" - "),o("code",[e._v("string")]),e._v(": Transaction identifier of the log")]),e._v(" "),o("li",[o("code",[e._v("txOrigin")]),e._v(" - "),o("code",[e._v("string")]),e._v(": Transaction signer the log")])]),e._v(" "),o("h2",{attrs:{id:"thor-vmoutput"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#thor-vmoutput"}},[e._v("#")]),e._v(" Thor.VMOutput")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("data")]),e._v(" - "),o("code",[e._v("string")]),e._v(": The returned data of the operation(hex string), e.g. a smart contract function returned value")]),e._v(" "),o("li",[o("code",[e._v("vmError")]),e._v(" - "),o("code",[e._v("string")]),e._v(": VM error that occurred during the execution")]),e._v(" "),o("li",[o("code",[e._v("reverted")]),e._v(" - "),o("code",[e._v("boolean")]),e._v(": Indicated whether the execution is reverted by the VM")]),e._v(" "),o("li",[o("code",[e._v("events")]),e._v(" - "),o("a",{attrs:{href:"#thorlogevent"}},[o("code",[e._v("Array<Thor.Log.Event>")])]),e._v(": Event logs that produced during the execution")]),e._v(" "),o("li",[o("code",[e._v("transfer")]),e._v(" - "),o("a",{attrs:{href:"#thorlogtransfer"}},[o("code",[e._v("Array<Thor.Log.Transfer")])]),e._v(": Transfer logs that produced during the execution")]),e._v(" "),o("li",[o("code",[e._v("decoded")]),e._v("  - "),o("a",{attrs:{href:"#thordecoded"}},[o("code",[e._v("Thor.Decoded(optional)")])]),e._v(": Decoded returned data based on the method ABI")])]),e._v(" "),o("h2",{attrs:{id:"thor-filter-result"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#thor-filter-result"}},[e._v("#")]),e._v(" Thor.Filter.Result")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("Thor.Filter.Event.Result")]),e._v(" - "),o("a",{attrs:{href:"#thorlogevent"}},[o("code",[e._v("Thor.Log.Event")])])]),e._v(" "),o("li",[o("code",[e._v("Thor.Filter.Transfer.Result")]),e._v(" - "),o("a",{attrs:{href:"#thorlogtransfer"}},[o("code",[e._v("Thor.Log.Transfer")])])])]),e._v(" "),o("h2",{attrs:{id:"thor-decoded"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#thor-decoded"}},[e._v("#")]),e._v(" Thor.Decoded")]),e._v(" "),o("p",[o("code",[e._v("Decoded")]),e._v(" is a mixed object that produced by "),o("code",[e._v("ABI.decode")]),e._v(" with the ABI definition of "),o("code",[e._v("EVENT")]),e._v(" or "),o("code",[e._v("METHOD")]),e._v(". Decoded will be present only at the ABI definition is provided.")]),e._v(" "),o("ul",[o("li",[e._v("{index} - "),o("code",[e._v("number")]),e._v(": Decoded property by parameter index")]),e._v(" "),o("li",[e._v("{name} - "),o("code",[e._v("string")]),e._v(": Decoded property by parameter name if any")]),e._v(" "),o("li",[o("code",[e._v("revertReason")]),e._v(" - "),o("code",[e._v("string(optional)")]),e._v(": Reason message when method call reverted. It's usually the second argument of "),o("code",[e._v("require")]),e._v(" statement in Solidity, and helpful to diagnose contract code.")])]),e._v(" "),o("p",[e._v("For example if a method's definition is "),o("code",[e._v("function name() public pure returns(string name)")]),e._v(" after perform the simulate call "),o("code",[e._v("decoded")]),e._v(" will be like following:")]),e._v(" "),o("div",{staticClass:"language-javascript extra-class"},[o("pre",{pre:!0,attrs:{class:"language-javascript"}},[o("code",[o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),o("span",{pre:!0,attrs:{class:"token string"}},[e._v('"0"')]),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token string"}},[e._v('"VeThor"')]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),o("span",{pre:!0,attrs:{class:"token string"}},[e._v('"name"')]),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token string"}},[e._v('"VeThor"')]),e._v("\n"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),o("p",[e._v("You can access the name by calling "),o("code",[e._v("decoded['name']")]),e._v(" or "),o("code",[e._v("decoded['0']")]),e._v("(Number index is for non-named outputs).")]),e._v(" "),o("p",[e._v("Another example if an event's definition is "),o("code",[e._v("event Transfer(address indexed _from, address indexed _to, uint256 _value)")]),e._v(" after performing the filter "),o("code",[e._v("decoded")]),e._v(" will be the following:")]),e._v(" "),o("div",{staticClass:"language-javascript extra-class"},[o("pre",{pre:!0,attrs:{class:"language-javascript"}},[o("code",[o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),o("span",{pre:!0,attrs:{class:"token string"}},[e._v('"0"')]),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token string"}},[e._v('"0x7567D83b7b8d80ADdCb281A71d54Fc7B3364ffed"')]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),o("span",{pre:!0,attrs:{class:"token string"}},[e._v('"1"')]),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token string"}},[e._v('"0x00F34f4462c0f6a6f5E76Fb1b6D63F05A32eD2C6"')]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),o("span",{pre:!0,attrs:{class:"token string"}},[e._v('"2"')]),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token string"}},[e._v('"1000000000000000000"')]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),o("span",{pre:!0,attrs:{class:"token string"}},[e._v('"_from"')]),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token string"}},[e._v('"0x7567D83b7b8d80ADdCb281A71d54Fc7B3364ffed"')]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),o("span",{pre:!0,attrs:{class:"token string"}},[e._v('"_to"')]),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token string"}},[e._v('"0x00F34f4462c0f6a6f5E76Fb1b6D63F05A32eD2C6"')]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),o("span",{pre:!0,attrs:{class:"token string"}},[e._v('"_value"')]),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token string"}},[e._v('"1000000000000000000"')]),e._v("\n"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])])])}),[],!1,null,null,null);t.default=a.exports}}]);